{"version":3,"sources":["components/Automaton.js","components/Reducers/WorldReducer.js","components/Reducers/RuleListReducer.js","components/Flipper.js","components/RuleGrid.js","components/Rule.js","components/RuleList.js","components/Cell.js","components/CellRow.js","components/World.js","components/SudokuUtils.js","pages/Sudoku.js","components/Reducers/SudokuReducer.js","assets/head.png","pages/Home.js","pages/App.js","reportWebVitals.js","index.js"],"names":["validateRule","worldState","rule","i","j","neighbors","conditionSatisfied","onlyCount","cells","grid","neighs_alive","to_be_alive","neighs","x","y","relationOperations","length","relations","Cellular","ruleList","next","rows","cols","arr","Array","make2DArray","rules","valid","result","State","prevState","this","maxRows","maxCols","minRows","minCols","cellSize","cellSizeChange","prevMaxRows","prevMaxCols","currentState","maxDim","calculateRowsCols","k","l","row","col","push","Math","floor","convertVhToPx","convertVwToPx","increase","pop","StateDict","StateNames","InitialState","WhiteSpace","state","BoxBorder","Random","random","reducer","action","type","recalculate","data","newIndex","Rule","id","RuleList","prevRuleList","generateId","v4","Custom","newDefaultRule","GameOfLife","rl","getRuleById","index","splice","Flipper","callback","className","onClick","e","GridCell","useContext","ruleContext","ruleListContext","dispatch","useState","isAlive","setIsAlive","backgroundColor","styles","setStyles","useEffect","style","RuleGrid","slice","map","OutputCell","RelationCell","operation","isOn","setIsOn","color","display","outerOverlayStyles","setOuterOverlayStyles","innerOverlayStyles","setInnerOverlayStyles","substring","defaultChecked","createContext","RuleItem","Provider","value","left","Cell","worldContext","world","dim","setDim","height","width","CellRow","World","simulation","setSimulation","simulate","toggleSimulation","clearInterval","setInterval","changeDim","isSafeCell","rowNo","colNo","isSafeRow","isSafeCol","isSafeBlock","c","r","startRow","startCol","Sudoku","isSafe","isError","getSudokuInitialState","sudokuState","setSudokuState","isUnderGen","setIsUnderGen","solveSudoku","findEmptyLocation","newState","handleValue","event","isIncre","preventDefault","currentVal","nextVal","rowCells","Fragment","cell","onContextMenu","vw","oneVhInPx","window","innerWidth","vh","innerHeight","smoothScrollTo","target","scrollContainer","parentNode","scrollTop","targetY","offsetTop","offsetParent","scroll","a","b","setTimeout","Home","homeRef","useRef","sudokuRef","current","src","Heading","alt","useReducer","worldReducer","InitialWorldState","ruleListReducer","InitialRuleListState","ref","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5983efd.chunk.js","sourcesContent":["const make2DArray = (rows, cols)=> {\r\n    let arr = new Array(rows);\r\n    for (let i = 0; i < rows; i++) {\r\n        arr[i] = new Array(cols);\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst validateRule = (worldState, rule, i, j) => {\r\n\r\n    let neighbors = worldState.neighbors[i][j];\r\n    let conditionSatisfied = false;\r\n\r\n    if(rule.onlyCount){\r\n\r\n        if(worldState.cells[i][j] === rule.grid[4]){\r\n\r\n            let neighs_alive = 0;\r\n            let to_be_alive = 0;\r\n\r\n            for(let i = 0; i < 9; i++){\r\n                if(rule.grid[i]) to_be_alive += 1;\r\n            }\r\n            to_be_alive -= rule.grid[4];\r\n\r\n\r\n            for(let neighs of neighbors){\r\n                if(worldState.cells[neighs.x][neighs.y]) neighs_alive += 1;\r\n            }\r\n            neighs_alive -= worldState.cells[i][j];\r\n\r\n            conditionSatisfied = false;\r\n\r\n            for(let i = 0; i < rule.relationOperations.length; i++){\r\n\r\n                if(rule.relationOperations[i] === '>'){\r\n                    if(rule.relations[i]){\r\n                        if(neighs_alive > to_be_alive) {\r\n                            conditionSatisfied = true; \r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(rule.relationOperations[i] === '<'){\r\n                    if(rule.relations[i]){\r\n                        if(neighs_alive < to_be_alive){\r\n                            conditionSatisfied = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(rule.relationOperations[i] === '='){\r\n                    if(rule.relations[i]){\r\n                        if(neighs_alive === to_be_alive){\r\n                            conditionSatisfied = true; \r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }else{\r\n\r\n        conditionSatisfied = true;\r\n        for(let i = 0; i < 9; i++){\r\n            let neighs = neighbors[i];\r\n            if(worldState.cells[neighs.x][neighs.y] !== rule.grid[i]) conditionSatisfied=false; break;\r\n        }\r\n\r\n    }\r\n\r\n    return conditionSatisfied;\r\n\r\n}\r\n\r\n\r\nexport const Cellular = (worldState, ruleList) => {\r\n\r\n    let next = make2DArray(worldState.rows, worldState.cols);\r\n\r\n    for(let i = 0; i < worldState.rows; i++){\r\n        for(let j = 0; j < worldState.cols; j++){\r\n\r\n            for(let rule of ruleList.rules){\r\n                if(rule.valid){\r\n                    if(validateRule(worldState, rule, i, j)){\r\n                        next[i][j] = rule.result;\r\n                        break;\r\n                    }else{\r\n                        next[i][j] = 0;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return next;\r\n\r\n}","import { convertVhToPx, convertVwToPx } from '../../pages/Home';\r\nimport { Cellular } from '../Automaton';\r\n\r\nclass State {\r\n\r\n    constructor(prevState){\r\n\r\n        if(!prevState){\r\n\r\n            this.cellSize = 20;\r\n            this.cellSizeChange = 2;\r\n\r\n            let maxDim = this.calculateRowsCols();\r\n\r\n            this.rows = maxDim.rows;\r\n            this.cols = maxDim.cols;\r\n            \r\n            this.maxRows = maxDim.rows;\r\n            this.maxCols = maxDim.cols;\r\n\r\n            this.minRows = 10;\r\n            this.minCols = 10;\r\n\r\n            this.prevMaxRows = [this.minRows];\r\n            this.prevMaxCols = [this.minCols];\r\n\r\n            this.currentState = 0;\r\n\r\n            this.neighbors = {};\r\n\r\n            this.cells = make2DArray(this.rows, this.cols);\r\n\r\n            for(let i = 0; i < this.rows; i++){\r\n                this.neighbors[i] = {};\r\n                for(let j = 0; j < this.cols; j++){\r\n                    this.cells[i][j] = 0;\r\n\r\n                    this.neighbors[i][j] = [];\r\n                    for (let k = -1; k < 2; k++) {\r\n                        for (let l = -1; l < 2; l++) {\r\n                            let row = (k + i + this.rows) % this.rows;\r\n                            let col = (l + j + this.cols) % this.cols;\r\n                            this.neighbors[i][j].push({x : row, y : col});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }else{\r\n\r\n            this.rows = prevState.rows;\r\n            this.cols = prevState.cols;\r\n\r\n            this.maxRows = prevState.maxRows;\r\n            this.maxCols = prevState.maxCols;\r\n\r\n            this.minRows = prevState.minRows;\r\n            this.minCols = prevState.minCols;\r\n\r\n            this.cellSize = prevState.cellSize;\r\n            this.cellSizeChange = prevState.cellSizeChange;\r\n\r\n            this.prevMaxRows = prevState.prevMaxRows;\r\n            this.prevMaxCols = prevState.prevMaxCols;\r\n\r\n            this.cells = prevState.cells;\r\n            this.currentState = prevState.currentState;\r\n            this.neighbors = prevState.neighbors;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    calculateRowsCols(){\r\n        return {\r\n            rows : Math.floor((convertVhToPx(80) - (this.cellSize * 4)) / this.cellSize),\r\n            cols : Math.floor((convertVwToPx(80) - (this.cellSize * 4)) / this.cellSize)\r\n        }\r\n    }\r\n\r\n    recalculate({increase, rows, cols}){\r\n\r\n        if(increase){\r\n\r\n            if(rows > this.maxRows || cols > this.maxCols){\r\n\r\n                this.prevMaxRows.push(this.maxRows);\r\n                this.prevMaxCols.push(this.maxCols);\r\n\r\n                this.cellSize -= this.cellSizeChange;\r\n\r\n            }\r\n        \r\n        }else{\r\n\r\n            if(rows < this.prevMaxRows[this.prevMaxRows.length - 1] || cols < this.prevMaxCols[this.prevMaxCols.length - 1]){\r\n\r\n                if(rows > this.prevMaxRows[this.prevMaxRows.length - 1]){\r\n                    rows = this.prevMaxRows[this.prevMaxRows.length - 1];\r\n                }\r\n\r\n                if(cols > this.prevMaxCols[this.prevMaxCols.length - 1]){\r\n                    cols = this.prevMaxCols[this.prevMaxCols.length - 1];\r\n                }\r\n\r\n                this.prevMaxRows.pop();\r\n                this.prevMaxCols.pop();\r\n\r\n                this.cellSize += this.cellSizeChange;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        let maxDim = this.calculateRowsCols();\r\n\r\n        this.maxRows = maxDim.rows;\r\n        this.maxCols = maxDim.cols;\r\n\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n\r\n        this.cells = make2DArray(this.rows, this.cols);\r\n\r\n        for(let i = 0; i < this.rows; i++){\r\n            this.neighbors[i] = {};\r\n            for(let j = 0; j < this.cols; j++){\r\n                this.neighbors[i][j] = [];\r\n                for (let k = -1; k < 2; k++) {\r\n                    for (let l = -1; l < 2; l++) {\r\n                        let row = (k + i + this.rows) % this.rows;\r\n                        let col = (l + j + this.cols) % this.cols;\r\n                        this.neighbors[i][j].push({x : row, y : col});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        StateDict[StateNames[this.currentState]](this);\r\n\r\n    }\r\n\r\n    check(i, j){\r\n        return i >= 0 && i < this.rows && j >= 0 && j < this.cols;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const BoxBorder = (state) => {\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            state.cells[i][j] = 0;\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < state.cols; i++){\r\n        state.cells[0][i] = 1;\r\n        state.cells[state.rows-1][i] = 1;\r\n    }\r\n\r\n    for(let j = 1; j < state.rows-1; j++){\r\n        state.cells[j][0] = 1;\r\n        state.cells[j][state.cols-1] = 1;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const Random = (state) => {\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            state.cells[i][j] = 0;\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            if(Math.random() > 0.9){\r\n                state.cells[i][j] = 1;\r\n            }else{\r\n                state.cells[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const WhiteSpace = (state) => {\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            state.cells[i][j] = 0;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const InitialState = () => {\r\n    return new State(null);\r\n}\r\n\r\nconst StateDict = {WhiteSpace, BoxBorder, Random};\r\nexport let StateNames = [];\r\nfor(let k in StateDict) StateNames.push(k);\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n\r\n    if(action.type === \"CHANGE_DIM\"){\r\n\r\n        state.recalculate(action.data);\r\n\r\n    }else if(action.type === \"TOGGLE_ON\"){\r\n\r\n        state.cells[action.data.i][action.data.j] = 1;\r\n\r\n    }else if(action.type === \"TOGGLE_OFF\"){\r\n\r\n        state.cells[action.data.i][action.data.j] = 0;\r\n        \r\n    }else if(action.type === \"CHANGE_STATE\"){\r\n\r\n        let newIndex = 0;\r\n\r\n        if(action.data){\r\n\r\n            newIndex = state.currentState - 1;\r\n\r\n            if(newIndex < 0){\r\n                newIndex = StateNames.length - 1;\r\n            }\r\n\r\n        }else{\r\n\r\n            newIndex = state.currentState + 1;\r\n\r\n            if(newIndex >= StateNames.length){\r\n                newIndex = 0;\r\n            }\r\n\r\n        }\r\n\r\n        state.currentState = newIndex;\r\n        StateDict[StateNames[state.currentState]](state);\r\n\r\n    }else if(action.type === \"CLEAR\"){\r\n        \r\n        for(let i = 0; i < state.rows; i++){\r\n            for(let j = 0; j < state.cols; j++){\r\n                state.cells[i][j] = false;\r\n            }\r\n        }\r\n    \r\n    }else if(action.type === \"SIMULATING\"){\r\n\r\n        state.cells = Cellular(state, action.data.ruleList);\r\n\r\n    }\r\n\r\n    return new State(state, 0, 0);\r\n}\r\n\r\nconst make2DArray = (rows, cols)=> {\r\n    let arr = new Array(rows);\r\n    for (let i = 0; i < rows; i++) {\r\n        arr[i] = new Array(cols);\r\n    }\r\n    return arr;\r\n}\r\n","import { act } from 'react-dom/cjs/react-dom-test-utils.production.min';\r\nimport { v4 } from 'uuid';\r\n\r\nclass Rule {\r\n\r\n    constructor(\r\n        id,\r\n        grid = [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        onlyCount = false,\r\n        valid = true,\r\n        result = 0,\r\n        relations = [0, 0, 0],\r\n        ){\r\n\r\n        this.id = id\r\n        this.grid = grid\r\n        \r\n        this.onlyCount = onlyCount;\r\n        this.valid = valid;\r\n        this.result = result;\r\n        this.relations = relations;\r\n        this.relationOperations = ['>', '<', '='];\r\n\r\n    }\r\n\r\n}\r\n\r\nclass RuleList {\r\n\r\n    constructor(prevRuleList){\r\n\r\n        if(prevRuleList){\r\n            this.rules = prevRuleList.rules\r\n            this.currentState = prevRuleList.currentState;\r\n        }else{\r\n            this.rules = [];\r\n            this.currentState = 0;\r\n        }\r\n\r\n    }\r\n\r\n    newDefaultRule(){\r\n        return new Rule(this.generateId());\r\n    }\r\n\r\n    generateId(){\r\n        return v4();\r\n    }\r\n\r\n    getRuleById(id){\r\n        for(let i = 0; i < this.rules.length; i++){\r\n            if(this.rules[i].id === id){\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n}\r\n\r\nconst Custom = (state) => {\r\n    // state.rules\r\n    state.rules = [state.newDefaultRule()];\r\n}\r\n\r\nconst GameOfLife = (state) => {\r\n\r\n    state.rules = [];\r\n    state.rules.push(new Rule(state.generateId(), [1, 0, 0, 0, 1, 0, 1, 0, 0], true, true, 1, [0, 0, 1]));\r\n    state.rules.push(new Rule(state.generateId(), [1, 0, 1, 0, 1, 0, 1, 0, 0], true, true, 1, [0, 0, 1]));\r\n    state.rules.push(new Rule(state.generateId(), [1, 0, 1, 0, 0, 0, 1, 0, 0], true, true, 1, [0, 0, 1]));\r\n\r\n}\r\n\r\nconst StateDict = {Custom, GameOfLife};\r\nexport let StateNames = [];\r\nfor(let k in StateDict) StateNames.push(k);\r\n\r\nexport const InitialState = () => {\r\n    let rl = new RuleList(null);\r\n    Custom(rl);\r\n    return rl;\r\n}\r\n\r\nexport const reducer = (state, action) => {\r\n\r\n    if(action.type === \"TOGGLE_GRID\"){\r\n\r\n        let rule = state.rules[state.getRuleById(action.data.id)];\r\n        if(rule.grid[action.data.index]){\r\n            rule.grid[action.data.index] = 0;\r\n        }else{\r\n            rule.grid[action.data.index] = 1;\r\n        }\r\n\r\n    }else if(action.type === \"TOGGLE_RESULT\"){\r\n\r\n        let rule = state.rules[state.getRuleById(action.data.id)];\r\n        if(rule.result){\r\n            rule.result = 0;\r\n        }else{\r\n            rule.result = 1;\r\n        }\r\n\r\n    }else if(action.type === \"TOGGLE_VALID\"){\r\n\r\n        state.rules[state.getRuleById(action.data.id)].valid = !state.rules[state.getRuleById(action.data.id)].valid;\r\n\r\n    }else if(action.type === \"TOGGLE_ONLY_COUNT\"){\r\n        \r\n        state.rules[state.getRuleById(action.data.id)].onlyCount = !state.rules[state.getRuleById(action.data.id)].onlyCount;\r\n\r\n    }else if(action.type === \"TOGGLE_RELATION\"){\r\n\r\n        let rule = state.rules[state.getRuleById(action.data.id)];\r\n        if(rule.relations[action.data.index]){\r\n            rule.relations[action.data.index] = 0;\r\n        }else{\r\n            rule.relations[action.data.index] = 1;\r\n        }\r\n\r\n\r\n        if(action.data.index === 0){\r\n            rule.relations[1] = 0;\r\n        }else if(action.data.index === 1){\r\n            rule.relations[0] = 0;\r\n        }\r\n\r\n    }else if (action.type === \"REMOVE\"){\r\n\r\n        state.rules.splice(state.getRuleById(action.data.id), 1);\r\n\r\n    }else if(action.type === \"NEW\"){\r\n\r\n        state.rules.push(state.newDefaultRule());\r\n\r\n    }else if(action.type === \"CHANGE_STATE\"){\r\n\r\n        let newIndex = 0;\r\n\r\n        if(action.data){\r\n\r\n            newIndex = state.currentState - 1;\r\n\r\n            if(newIndex < 0){\r\n                newIndex = StateNames.length - 1;\r\n            }\r\n\r\n        }else{\r\n\r\n            newIndex = state.currentState + 1;\r\n\r\n            if(newIndex >= StateNames.length){\r\n                newIndex = 0;\r\n            }\r\n\r\n        }\r\n\r\n        state.currentState = newIndex;\r\n        StateDict[StateNames[state.currentState]](state);\r\n    }\r\n\r\n    return new RuleList(state);\r\n}","import React from 'react';\r\n\r\nimport '../styles/Flipper.css';\r\n\r\nconst Flipper = ({state, callback}) => {\r\n\r\n    return (\r\n        <div className=\"flipper-container\">\r\n            <div className=\"flipper-left\" onClick={(e) => callback(true)}><i className=\"bi bi-chevron-left\"></i></div>\r\n            <div className=\"flipper-content\">{state}</div>\r\n            <div className=\"flipper-right\" onClick={(e) => callback(false)}><i className=\"bi bi-chevron-right\"></i></div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Flipper;","import React, {useContext, useState, useEffect} from 'react';\r\n\r\nimport { ruleContext } from './RuleList';\r\nimport { ruleListContext } from '../pages/Home';\r\n\r\nimport '../styles/RuleGrid.css';\r\n\r\nconst GridCell = ({index}) => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n    const [isAlive, setIsAlive] = useState(rule.grid[index]);\r\n\r\n\r\n    const [styles, setStyles] = useState({\r\n        backgroundColor : 'white',\r\n    });\r\n\r\n    const toggleLife = (e) => {\r\n        dispatch({type : \"TOGGLE_GRID\", data : {id : rule.id, index : index}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(isAlive){\r\n            setStyles({\r\n                backgroundColor : 'black',\r\n            })\r\n        }else{\r\n            setStyles({\r\n                backgroundColor : 'white',\r\n            })\r\n        }\r\n\r\n    }, [isAlive]);\r\n\r\n    useEffect(() => {\r\n        setIsAlive(rule.grid[index]);\r\n    }, [ruleList, rule, index]);\r\n\r\n    return (\r\n        <div onClick={toggleLife} style={styles} className=\"grid-cell-container\"></div>\r\n    );\r\n}\r\n\r\n\r\nconst RuleGrid = () => {\r\n\r\n    const rule = useContext(ruleContext);\r\n\r\n    return (\r\n        <div className=\"rule-grid-container\">\r\n            <div className=\"rule-grid-row\">\r\n                {rule.grid.slice(0, 3).map((state, index) => <GridCell key={0 + index} index={0 + index}></GridCell>)}\r\n            </div>\r\n            <div className=\"rule-grid-row\">\r\n                {rule.grid.slice(3, 6).map((state, index) => <GridCell key={3 + index} index={3 + index}></GridCell>)}\r\n            </div>\r\n            <div className=\"rule-grid-row\">\r\n                {rule.grid.slice(6, 9).map((state, index) => <GridCell key={6 + index} index={6 + index}></GridCell>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default RuleGrid;","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport RuleGrid from './RuleGrid';\r\nimport { ruleContext } from './RuleList';\r\nimport { ruleListContext } from '../pages/Home';\r\n\r\nimport '../styles/Rule.css';\r\n\r\nconst OutputCell = () => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const [isAlive, setIsAlive] = useState(rule.result);\r\n\r\n    const [styles, setStyles] = useState({\r\n        backgroundColor : 'white',\r\n    });\r\n\r\n    const toggleLife = (e) => {\r\n        dispatch({type : \"TOGGLE_RESULT\", data : {id : rule.id}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(isAlive){\r\n            setStyles({\r\n                backgroundColor : 'black',\r\n            })\r\n        }else{\r\n            setStyles({\r\n                backgroundColor : 'white',\r\n            })\r\n        }\r\n\r\n    }, [isAlive]);\r\n\r\n    useEffect(() => {\r\n        setIsAlive(rule.result);\r\n    }, [ruleList, rule]);\r\n\r\n    return (\r\n        <div onClick={toggleLife} style={styles} className=\"output-cell-container\"></div>\r\n    );\r\n\r\n}\r\n\r\nconst RelationCell = ({index, operation}) => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const [isOn, setIsOn] = useState(rule.relations[index]);\r\n\r\n    const [styles, setStyles] = useState({\r\n        color : 'black'\r\n    });\r\n\r\n    const toggleRelation = (e) => {\r\n        dispatch({type : \"TOGGLE_RELATION\", data : {id : rule.id, index : index}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(isOn){\r\n            setStyles({\r\n                color : 'turquoise'\r\n            });\r\n        }else{\r\n            setStyles({\r\n                color : 'black'\r\n            });\r\n        }\r\n\r\n    }, [isOn]);\r\n\r\n    useEffect(() => {\r\n        setIsOn(rule.relations[index]);\r\n    }, [ruleList, rule, index]);\r\n\r\n    return (\r\n        <div style={styles} onClick={toggleRelation} className=\"rule-input\">{operation}</div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst Rule = () => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const [outerOverlayStyles, setOuterOverlayStyles] = useState({\r\n        display : 'none',\r\n    });\r\n\r\n    const [innerOverlayStyles, setInnerOverlayStyles] = useState({\r\n        display : 'none',\r\n    });\r\n\r\n    const toggleValid = () => {\r\n        dispatch({type : \"TOGGLE_VALID\", data : {id : rule.id}});\r\n    }\r\n\r\n    const toggleOnlyCount = () => {\r\n        dispatch({type : \"TOGGLE_ONLY_COUNT\", data : {id : rule.id}});\r\n    }\r\n\r\n    const removeRule = () => {\r\n        dispatch({type : \"REMOVE\", data : {id : rule.id}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(!rule.valid){\r\n            setOuterOverlayStyles({\r\n                display : 'block',\r\n            })\r\n        }else{\r\n            setOuterOverlayStyles({\r\n                display : 'none',\r\n            })\r\n        }\r\n\r\n        if(!rule.onlyCount){\r\n            setInnerOverlayStyles({\r\n                display : 'block',\r\n            })\r\n        }else{\r\n            setInnerOverlayStyles({\r\n                display : 'none',\r\n            })\r\n        }\r\n\r\n    }, [ruleList, rule]);\r\n\r\n    return (\r\n        <div className=\"rule-container\">\r\n            <div className=\"rule-title\">\r\n                <div className=\"rule-id\">\r\n                    #{rule.id.substring(1, 5)}\r\n                </div>\r\n                <div className=\"rule-visibility\">\r\n                    <input onClick={toggleValid} type=\"checkbox\" defaultChecked={rule.valid}/>\r\n                </div>\r\n                <div onClick={removeRule} className=\"rule-delete\">\r\n                    <i className=\"bi bi-x\"></i>\r\n                </div>\r\n            </div>\r\n            <div className=\"rule-body\">\r\n                <div style={outerOverlayStyles} className=\"rule-overlay\"></div>\r\n                <div className=\"rule-body-wrapper\">\r\n                    <div className=\"rule-rule\">\r\n                        <div className=\"rule-grid\">\r\n                            <RuleGrid></RuleGrid>\r\n                        </div>\r\n                        <div className=\"rule-spacer\">\r\n                            <i className=\"bi bi-arrow-right\"></i>\r\n                        </div>\r\n                        <div className=\"rule-output\">\r\n                            <OutputCell></OutputCell>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"rule-controls\">\r\n                        <div className=\"rule-only-count\">\r\n                            <input onClick={toggleOnlyCount} type=\"checkbox\" defaultChecked={rule.onlyCount}/>\r\n                        </div>\r\n                        <div className=\"rule-relations\">\r\n                            <div style={innerOverlayStyles} className=\"rule-relations-overlay\"></div>\r\n                            <div className=\"rule-relations-wrapper\">\r\n                                {rule.relationOperations.map((operation, index) => <RelationCell key={index} index={index} operation={operation}></RelationCell>)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Rule;","import React, { createContext, useContext } from 'react';\r\n\r\nimport { StateNames } from './Reducers/RuleListReducer';\r\nimport { ruleListContext } from '../pages/Home';\r\nimport Flipper from './Flipper';\r\n\r\nimport Rule from './Rule';\r\n\r\nimport '../styles/RuleList.css';\r\n\r\nexport const ruleContext = createContext();\r\n\r\nexport const RuleList = () => {\r\n\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const addNewRule = () => {\r\n        dispatch({type : \"NEW\"});\r\n    }\r\n\r\n    const stateChange = (left) => {\r\n        dispatch({type : \"CHANGE_STATE\", data : left});\r\n    }\r\n\r\n    return (\r\n        <div className=\"rule-list-container\">\r\n            <div className=\"rule-list-body\">\r\n                {ruleList.rules.map((RuleItem, index) => (\r\n                    <ruleContext.Provider key={index} value={RuleItem}>\r\n                        <Rule></Rule>\r\n                    </ruleContext.Provider>\r\n                )\r\n                )}\r\n            </div>\r\n            <div className=\"rule-list-controls\">\r\n                <div onClick={addNewRule} className=\"rule-list-add\"><i className=\"bi bi-plus-square\"></i></div>\r\n                <Flipper state={StateNames[ruleList.currentState]} callback={stateChange}></Flipper>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react';\r\n\r\nimport { worldContext } from '../pages/Home';\r\n\r\nimport '../styles/Cell.css';\r\n\r\nconst Cell = ({i, j}) => {\r\n\r\n    \r\n    const [world, dispatch] = useContext(worldContext);\r\n    const [isAlive, setIsAlive] = useState(world.cells[i][j]);\r\n    const [dim, setDim] = useState(world.cellSize);\r\n    \r\n\r\n    const [styles, setStyles] = useState({\r\n        backgroundColor : 'white',\r\n        height : `${dim}px`,\r\n        width : `${dim}px`\r\n    });\r\n\r\n    const toggleLife = (e) => {\r\n\r\n        if(world.currentState === 0){\r\n\r\n            if(!isAlive){\r\n                dispatch({data : {i, j}, type : \"TOGGLE_ON\"});\r\n            }else{\r\n                dispatch({data : {i, j}, type : \"TOGGLE_OFF\"});\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(isAlive){\r\n            setStyles({\r\n                backgroundColor : 'black',\r\n                height : `${dim}px`,\r\n                width : `${dim}px`\r\n            })\r\n        }else{\r\n            setStyles({\r\n                backgroundColor : 'white',\r\n                height : `${dim}px`,\r\n                width : `${dim}px`\r\n            })\r\n        }\r\n\r\n    }, [isAlive, dim]);\r\n\r\n    useEffect(() => {\r\n        setIsAlive(world.cells[i][j]);\r\n        setDim(world.cellSize);\r\n    }, [world, i, j]);\r\n\r\n    return (\r\n        <div onClick={(e) => toggleLife()} style={styles} className=\"cell-container\"></div>\r\n    );\r\n\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\n\r\nimport Cell from './Cell';\r\n\r\nimport '../styles/CellRow.css';\r\nconst CellRow = ({i, row}) => {\r\n\r\n    return (\r\n        <div className=\"cell-row-container\">\r\n            {row.map((state, j) => <Cell i={i} j={j} key={j}></Cell>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellRow;","import React, {useContext, useState} from 'react';\r\nimport CellRow from './CellRow';\r\nimport Flipper from './Flipper';\r\nimport { worldContext, ruleListContext } from '../pages/Home';\r\n\r\nimport { StateNames } from './Reducers/WorldReducer';\r\n\r\nimport '../styles/World.css';\r\n\r\n\r\nexport const World = () => {\r\n\r\n    const [world, dispatch] = useContext(worldContext);\r\n    const [ruleList, ] = useContext(ruleListContext);\r\n\r\n    const [simulation, setSimulation] = useState(null);\r\n\r\n    const clear = () => {\r\n        dispatch({type : 'CLEAR', value: null});\r\n    }\r\n\r\n    const simulate = () => {\r\n        dispatch({type : 'SIMULATING', data : {ruleList}});\r\n    }\r\n\r\n    const toggleSimulation = () => {\r\n        if(simulation){\r\n            clearInterval(simulation);\r\n            setSimulation(null);\r\n        }else{\r\n            setSimulation(setInterval(simulate, 100));\r\n        }\r\n    }\r\n\r\n    const stateChange = (left) => {\r\n        dispatch({type : \"CHANGE_STATE\", data : left});\r\n    }\r\n\r\n    const changeDim = (rows) => {\r\n        if(rows){\r\n            return (left) => {\r\n                if(left){\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: false, rows : world.rows - 1, cols : world.cols}})\r\n                }else{\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: true, rows : world.rows + 1, cols : world.cols}})\r\n                }\r\n            }\r\n        }else{\r\n            return (left) => {\r\n                if(left){\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: false, rows : world.rows, cols : world.cols - 1}})\r\n                }else{\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: true, rows : world.rows, cols : world.cols + 1}})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"world-container\">\r\n\r\n            <div className=\"world-wrapper\">\r\n                <div className=\"world-grid\">\r\n                {\r\n                    world.cells.map((row, i) => <CellRow i={i} key={i} row={row}></CellRow>)\r\n                }\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"world-controls\">\r\n                <div className=\"world-simlation-buttons\">\r\n                    {!simulation && <div className=\"world-btn world-play-pause\" onClick={(e) => toggleSimulation()}><i className=\"bi bi-play\"></i></div>}\r\n                    {simulation && <div className=\"world-btn world-play-pause\" onClick={(e) => toggleSimulation()}><i className=\"bi bi-pause\"></i></div>}\r\n                    <div className=\"world-btn world-step-it\" onClick={(e) => simulate()}><i className=\"bi bi-chevron-double-right\"></i></div>\r\n                </div>\r\n                <div className=\"world-state-buttons\">\r\n                    <Flipper state={StateNames[world.currentState]} callback={stateChange}></Flipper>\r\n                </div>\r\n                <div className=\"world-grid-controls\">\r\n                    <Flipper state={world.rows} callback={changeDim(true)}></Flipper>\r\n                    <Flipper state={world.cols} callback={changeDim(false)}></Flipper>\r\n                    <div className=\"world-btn world-clear\" onClick={(e) => clear()}><i className=\"bi bi-x-lg\"></i></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default World;","export const isSafeCell = (grid, rowNo, colNo, value) => {\r\n    return isSafeRow(grid, rowNo, colNo, value) && \r\n    isSafeCol(grid, rowNo, colNo, value) &&\r\n    isSafeBlock(grid, rowNo, colNo, value);\r\n}\r\n\r\nexport const isSafeRow = (grid, rowNo, colNo, value) => {\r\n    for(let c = 0; c < 9; c++){\r\n        if(c === colNo) continue;\r\n        if(grid[rowNo][c].value === value){\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const isSafeCol = (grid, rowNo, colNo, value) => {\r\n    for(let r = 0; r < 9; r++){\r\n        if(rowNo === r) continue;\r\n        if(grid[r][colNo].value === value){\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const isSafeBlock = (grid, rowNo, colNo, value) => {\r\n    let startRow = rowNo - rowNo%3;\r\n    let startCol = colNo - colNo%3;\r\n    for(let r = 0; r < 3; r++){\r\n        for(let c = 0; c < 3; c++){\r\n            if(startRow+r === rowNo && startCol+c === colNo) continue;\r\n            if(grid[startRow+r][startCol+c].value === value){\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const isEmpty = (grid, r, c) => {\r\n    return grid[r][c].value === 0;\r\n}\r\n\r\nexport const findEmptyLocation = (grid) => {\r\n    for(let r = 0; r < 9; r++){\r\n        for(let c = 0; c < 9; c++){\r\n            if(grid[r][c].value === 0){\r\n                return [r, c, true]\r\n            }\r\n        }\r\n    }\r\n    return [null, null, false]\r\n}\r\n\r\nexport const haveErrors = (grid) => {\r\n    for(let r = 0; r < 9; r++){\r\n        for(let c = 0; c < 9; c++){\r\n            if(grid[r][c].isError === true){\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}","import React, {useEffect, useState } from 'react';\r\nimport { getSudokuInitialState } from '../components/Reducers/SudokuReducer';\r\nimport { findEmptyLocation, isSafeCell } from '../components/SudokuUtils';\r\n\r\nimport '../styles/Sudoku.css';\r\n\r\nexport const Sudoku = () => {\r\n\r\n    const [sudokuState, setSudokuState] = useState(getSudokuInitialState());\r\n    const [isUnderGen, setIsUnderGen] = useState(false);\r\n\r\n    const solveSudoku = () => {\r\n\r\n        let [row, col, emptyCheck] = findEmptyLocation(sudokuState);\r\n\r\n        if(!emptyCheck) {\r\n            return true;\r\n        }\r\n\r\n        for(let i = 1; i < 10; i++){\r\n\r\n            if(isSafeCell(sudokuState, row, col, i)){\r\n                let newState = [...sudokuState].map(row => {\r\n                    return row.slice()\r\n                })\r\n\r\n                newState[row][col].value = i\r\n                setSudokuState(newState)\r\n\r\n                if(solveSudoku()){ \r\n                    return true;\r\n                }\r\n\r\n                newState = [...sudokuState].map(row => {\r\n                    return row.slice()\r\n                })\r\n                newState[row][col].value = 0\r\n                setSudokuState(newState)\r\n            }\r\n\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    const handleValue = (event, isIncre, row, col) => {\r\n        event.preventDefault()\r\n        let currentVal = sudokuState[row][col].value\r\n        let nextVal = currentVal\r\n        \r\n        if(isIncre){\r\n            nextVal =  currentVal >= 9 ? 0 : currentVal + 1;\r\n        }else{\r\n            nextVal = currentVal <= 0 ? 9 : currentVal - 1;\r\n        }\r\n        \r\n        let newState = [...sudokuState].map(rowCells => {\r\n            return rowCells.slice()\r\n        })\r\n        \r\n        newState[row][col].value = nextVal\r\n        \r\n        if(nextVal !== 0 && !isSafeCell(sudokuState, row, col, nextVal)){\r\n            newState[row][col].isError = true\r\n        }else{\r\n            newState[row][col].isError = false\r\n        }\r\n        \r\n        setSudokuState(newState)\r\n    }\r\n    \r\n    const solve = () => {\r\n\r\n        if(isUnderGen){\r\n            setIsUnderGen(false);\r\n            // console.log(isUnderGen);\r\n        }else{\r\n            setIsUnderGen(true);\r\n            solveSudoku();\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"sudoku-container\">\r\n            <div className=\"sudoku-wrapper\">\r\n                \r\n                {\r\n                    sudokuState.map((row, r) => (\r\n                        <React.Fragment>\r\n                            {\r\n                                row.map((cell, c) => (\r\n                                    <div className={`sudokucell-container ${r%3 === 0 ? \"cell-top\": ''}  ${c%3===0 ? \"cell-left\": ''}  ${cell.isError ? 'cell-isError': ''}`} \r\n                                        onClick={e => handleValue(e, true, r, c)} \r\n                                        onContextMenu={e => handleValue(e, false, r, c)} \r\n                                    >\r\n                                        {cell.value === 0 ? '' : cell.value}\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </React.Fragment>\r\n                    )) \r\n                }\r\n                \r\n            </div>\r\n            <div className=\"sudoku-controls\">\r\n                <div className=\"sudokubtn\" onClick={solve}>\r\n                    {\r\n                        isUnderGen ? (\r\n                            <i className=\"bi bi-pause\"></i>\r\n                        ) : (\r\n                            <i className=\"bi bi-play\"></i>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"sudokubtn\">\r\n                    <i className=\"bi bi-download\"></i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","export const getSudokuInitialState = () => {\r\n    let cells = []\r\n    for(let r = 0; r < 9; r++){\r\n        let row = [];\r\n        for(let c = 0; c < 9; c++){\r\n            // row[c] = new SudokuCellProp(r+1, c+1);\r\n            row.push({\r\n                value: 0,\r\n                row: r,\r\n                col: c,\r\n                isSafe: false,\r\n                isError: false\r\n            });\r\n        }\r\n        cells.push(row);\r\n    }\r\n    return cells\r\n}\r\n\r\nexport const sudokuReducer = (state, action) => {\r\n    if(action.type === \"CHANGE_VALUE\"){\r\n        console.log(action)\r\n        let r = action.row\r\n        let c = action.col\r\n        let newState = [...state].map(row => {\r\n            return row.slice()\r\n        })\r\n        newState[r][c] = action.returnVal\r\n        return newState\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/head.9a3449af.png\";","import React, {createContext, useReducer, useRef} from 'react';\r\n\r\nimport { reducer as worldReducer, InitialState as InitialWorldState } from '../components/Reducers/WorldReducer';\r\nimport { reducer as ruleListReducer, InitialState as InitialRuleListState } from '../components/Reducers/RuleListReducer';\r\n\r\nimport { RuleList } from '../components/RuleList';\r\nimport World from '../components/World';\r\nimport { Sudoku } from './Sudoku';\r\n\r\nimport '../styles/Home.css';\r\nimport '../styles/Landing.css'\r\nimport Heading from '../assets/head.png'\r\n\r\nexport const worldContext = createContext();\r\nexport const ruleListContext = createContext();\r\nexport const sudokuContext = createContext();\r\n\r\nexport const convertVwToPx = (vw=80) => {\r\n    const oneVhInPx = window.innerWidth / 100;\r\n    return oneVhInPx * vw;\r\n};\r\n\r\nexport const convertVhToPx = (vh=80) => {\r\n    const oneVhInPx = window.innerHeight / 100;\r\n    return oneVhInPx * vh;\r\n};\r\n\r\nconst smoothScrollTo = target => {\r\n    var scrollContainer = target;\r\n    do { //find scroll container\r\n        scrollContainer = scrollContainer.parentNode;\r\n        if (!scrollContainer) return;\r\n        scrollContainer.scrollTop += 1;\r\n    } while (scrollContainer.scrollTop === 0);\r\n    \r\n    var targetY = 0;\r\n    do { //find the top of target relatively to the container\r\n        if (target === scrollContainer) break;\r\n        targetY += target.offsetTop;\r\n    } while (target === target.offsetParent);\r\n    \r\n    let scroll = (c, a, b, i) => {\r\n        i++; if (i > 30) return;\r\n        c.scrollTop = a + (b - a) / 30 * i;\r\n        setTimeout(function(){ scroll(c, a, b, i); }, 20);\r\n    }\r\n    // start scrolling\r\n    scroll(scrollContainer, scrollContainer.scrollTop, targetY, 0);\r\n}\r\n\r\nexport const Home = () => {\r\n\r\n    const homeRef = useRef(null);\r\n    const sudokuRef = useRef(null);\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <div className=\"landing-container\">\r\n                <div className=\"landing-nav\">\r\n                    <div className=\"landing-shadow-wrapper\">\r\n                        <div className=\"landing-btn landing-left-btn\" onClick={() => smoothScrollTo(homeRef.current)}>\r\n                            Cellular <br/>Automaton\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"landing-shadow-wrapper\">\r\n                        <div className=\"landing-btn landing-right-btn\" onClick={() => smoothScrollTo(sudokuRef.current)}>\r\n                            Sudoku<br/> Solver\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"landing-wrapper\">\r\n                    <img src={Heading} alt=\"\" />\r\n                </div>\r\n            </div>\r\n            <worldContext.Provider value={useReducer(worldReducer, null, InitialWorldState)}>\r\n                <ruleListContext.Provider value={useReducer(ruleListReducer, null, InitialRuleListState)}>\r\n                    <div className=\"home-world-grid-wrapper\" ref={homeRef}>\r\n                        <World/>\r\n                        <RuleList/>\r\n                    </div>\r\n                </ruleListContext.Provider>\r\n            </worldContext.Provider> \r\n            <div className=\"home-sudoku-wrapper\" ref={sudokuRef}>\r\n                <Sudoku/>\r\n            </div> \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n// export default Home\r\n","import { Switch, Route } from 'react-router-dom'\r\nimport { Home } from './Home';\r\n\r\nimport '../styles/App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app-container\">\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\nimport App from './pages/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}