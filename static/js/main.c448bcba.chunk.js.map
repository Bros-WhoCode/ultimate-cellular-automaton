{"version":3,"sources":["components/Cell.js","components/CellRow.js","components/Flipper.js","components/Automaton.js","components/Reducers/WorldReducer.js","components/World.js","components/Reducers/RuleListReducer.js","components/RuleGrid.js","components/Rule.js","components/RuleList.js","pages/Home.js","pages/App.js","reportWebVitals.js","index.js"],"names":["Cell","i","j","useContext","worldContext","world","dispatch","useState","cells","isAlive","setIsAlive","cellSize","dim","setDim","backgroundColor","height","width","styles","setStyles","useEffect","onClick","e","currentState","data","type","style","className","CellRow","row","map","state","Flipper","callback","validateRule","worldState","rule","neighbors","conditionSatisfied","onlyCount","grid","neighs_alive","to_be_alive","neighs","x","y","relationOperations","length","relations","console","log","Cellular","ruleList","next","rows","cols","arr","Array","make2DArray","rules","valid","result","State","prevState","this","maxRows","maxCols","minRows","minCols","cellSizeChange","prevMaxRows","prevMaxCols","maxDim","calculateRowsCols","k","l","col","push","Math","floor","convertVhToPx","convertVwToPx","increase","pop","StateDict","StateNames","InitialState","WhiteSpace","BoxBorder","Random","random","reducer","action","recalculate","newIndex","World","ruleListContext","simulation","setSimulation","simulate","toggleSimulation","clearInterval","setInterval","changeDim","left","value","Rule","id","RuleList","prevRuleList","newDefaultRule","generateId","v4","getRuleById","index","splice","GridCell","ruleContext","RuleGrid","slice","OutputCell","RelationCell","operation","isOn","setIsOn","color","display","outerOverlayStyles","setOuterOverlayStyles","innerOverlayStyles","setInnerOverlayStyles","substring","defaultChecked","createContext","RuleItem","Provider","vw","oneVhInPx","window","innerWidth","vh","innerHeight","Home","useReducer","worldReducer","InitialWorldState","ruleListReducer","InitialRuleListState","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c448bcba.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\n\r\nimport { worldContext } from '../pages/Home';\r\n\r\nimport '../styles/Cell.css';\r\n\r\nconst Cell = ({i, j}) => {\r\n\r\n    \r\n    const [world, dispatch] = useContext(worldContext);\r\n    const [isAlive, setIsAlive] = useState(world.cells[i][j]);\r\n    const [dim, setDim] = useState(world.cellSize);\r\n    \r\n\r\n    const [styles, setStyles] = useState({\r\n        backgroundColor : 'white',\r\n        height : `${dim}px`,\r\n        width : `${dim}px`\r\n    });\r\n\r\n    const toggleLife = (e) => {\r\n\r\n        if(world.currentState === 0){\r\n\r\n            if(!isAlive){\r\n                dispatch({data : {i, j}, type : \"TOGGLE_ON\"});\r\n            }else{\r\n                dispatch({data : {i, j}, type : \"TOGGLE_OFF\"});\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(isAlive){\r\n            setStyles({\r\n                backgroundColor : 'black',\r\n                height : `${dim}px`,\r\n                width : `${dim}px`\r\n            })\r\n        }else{\r\n            setStyles({\r\n                backgroundColor : 'white',\r\n                height : `${dim}px`,\r\n                width : `${dim}px`\r\n            })\r\n        }\r\n\r\n    }, [isAlive, dim]);\r\n\r\n    useEffect(() => {\r\n        setIsAlive(world.cells[i][j]);\r\n        setDim(world.cellSize);\r\n    }, [world, i, j]);\r\n\r\n    return (\r\n        <div onClick={(e) => toggleLife()} style={styles} className=\"cell-container\"></div>\r\n    );\r\n\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\n\r\nimport Cell from './Cell';\r\n\r\nimport '../styles/CellRow.css';\r\nconst CellRow = ({i, row}) => {\r\n\r\n    return (\r\n        <div className=\"cell-row-container\">\r\n            {row.map((state, j) => <Cell i={i} j={j} key={j}></Cell>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellRow;","import React from 'react';\r\n\r\nimport '../styles/Flipper.css';\r\n\r\nconst Flipper = ({state, callback}) => {\r\n\r\n    return (\r\n        <div className=\"flipper-container\">\r\n            <div className=\"flipper-left\" onClick={(e) => callback(true)}><i className=\"bi bi-chevron-left\"></i></div>\r\n            <div className=\"flipper-content\">{state}</div>\r\n            <div className=\"flipper-right\" onClick={(e) => callback(false)}><i className=\"bi bi-chevron-right\"></i></div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Flipper;","const make2DArray = (rows, cols)=> {\r\n    let arr = new Array(rows);\r\n    for (let i = 0; i < rows; i++) {\r\n        arr[i] = new Array(cols);\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst validateRule = (worldState, rule, i, j) => {\r\n\r\n    let neighbors = worldState.neighbors[i][j];\r\n    let conditionSatisfied = false;\r\n\r\n    if(rule.onlyCount){\r\n\r\n        if(worldState.cells[i][j] === rule.grid[4]){\r\n\r\n            let neighs_alive = 0;\r\n            let to_be_alive = 0;\r\n\r\n            for(let i = 0; i < 9; i++){\r\n                if(rule.grid[i]) to_be_alive += 1;\r\n            }\r\n            to_be_alive -= rule.grid[4];\r\n\r\n\r\n            for(let neighs of neighbors){\r\n                if(worldState.cells[neighs.x][neighs.y]) neighs_alive += 1;\r\n            }\r\n            neighs_alive -= worldState.cells[i][j];\r\n\r\n            conditionSatisfied = false;\r\n\r\n            for(let i = 0; i < rule.relationOperations.length; i++){\r\n\r\n                if(rule.relationOperations[i] === '>'){\r\n                    if(rule.relations[i]){\r\n                        if(neighs_alive > to_be_alive) {\r\n                            conditionSatisfied = true; \r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(rule.relationOperations[i] === '<'){\r\n                    if(rule.relations[i]){\r\n                        if(neighs_alive < to_be_alive){\r\n                            conditionSatisfied = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(rule.relationOperations[i] === '='){\r\n                    if(rule.relations[i]){\r\n                        if(neighs_alive === to_be_alive){\r\n                            conditionSatisfied = true; \r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }else{\r\n\r\n        conditionSatisfied = true;\r\n        for(let i = 0; i < 9; i++){\r\n            let neighs = neighbors[i];\r\n            console.log(worldState.cells[neighs.x][neighs.y], rule.grid[i]);\r\n            if(worldState.cells[neighs.x][neighs.y] !== rule.grid[i]) conditionSatisfied=false; break;\r\n        }\r\n\r\n    }\r\n\r\n    return conditionSatisfied;\r\n\r\n}\r\n\r\n\r\nexport const Cellular = (worldState, ruleList) => {\r\n\r\n    let next = make2DArray(worldState.rows, worldState.cols);\r\n\r\n    for(let i = 0; i < worldState.rows; i++){\r\n        for(let j = 0; j < worldState.cols; j++){\r\n\r\n            for(let rule of ruleList.rules){\r\n                if(rule.valid){\r\n                    if(validateRule(worldState, rule, i, j)){\r\n                        next[i][j] = rule.result;\r\n                        break;\r\n                    }else{\r\n                        next[i][j] = 0;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return next;\r\n\r\n}","import { convertVhToPx, convertVwToPx } from '../../pages/Home';\r\nimport { Cellular } from '../Automaton';\r\n\r\nclass State {\r\n\r\n    constructor(prevState){\r\n\r\n        if(!prevState){\r\n\r\n            this.cellSize = 20;\r\n            this.cellSizeChange = 2;\r\n\r\n            let maxDim = this.calculateRowsCols();\r\n\r\n            this.rows = maxDim.rows;\r\n            this.cols = maxDim.cols;\r\n            \r\n            this.maxRows = maxDim.rows;\r\n            this.maxCols = maxDim.cols;\r\n\r\n            this.minRows = 10;\r\n            this.minCols = 10;\r\n\r\n            this.prevMaxRows = [this.minRows];\r\n            this.prevMaxCols = [this.minCols];\r\n\r\n            this.currentState = 0;\r\n\r\n            this.neighbors = {};\r\n\r\n            this.cells = make2DArray(this.rows, this.cols);\r\n\r\n            for(let i = 0; i < this.rows; i++){\r\n                this.neighbors[i] = {};\r\n                for(let j = 0; j < this.cols; j++){\r\n                    this.cells[i][j] = 0;\r\n\r\n                    this.neighbors[i][j] = [];\r\n                    for (let k = -1; k < 2; k++) {\r\n                        for (let l = -1; l < 2; l++) {\r\n                            let row = (k + i + this.rows) % this.rows;\r\n                            let col = (l + j + this.cols) % this.cols;\r\n                            this.neighbors[i][j].push({x : row, y : col});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }else{\r\n\r\n            this.rows = prevState.rows;\r\n            this.cols = prevState.cols;\r\n\r\n            this.maxRows = prevState.maxRows;\r\n            this.maxCols = prevState.maxCols;\r\n\r\n            this.minRows = prevState.minRows;\r\n            this.minCols = prevState.minCols;\r\n\r\n            this.cellSize = prevState.cellSize;\r\n            this.cellSizeChange = prevState.cellSizeChange;\r\n\r\n            this.prevMaxRows = prevState.prevMaxRows;\r\n            this.prevMaxCols = prevState.prevMaxCols;\r\n\r\n            this.cells = prevState.cells;\r\n            this.currentState = prevState.currentState;\r\n            this.neighbors = prevState.neighbors;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    calculateRowsCols(){\r\n        return {\r\n            rows : Math.floor((convertVhToPx(80) - (this.cellSize * 4)) / this.cellSize),\r\n            cols : Math.floor((convertVwToPx(80) - (this.cellSize * 4)) / this.cellSize)\r\n        }\r\n    }\r\n\r\n    recalculate({increase, rows, cols}){\r\n\r\n        console.log(this);\r\n\r\n        if(increase){\r\n\r\n            if(rows > this.maxRows || cols > this.maxCols){\r\n\r\n                this.prevMaxRows.push(this.maxRows);\r\n                this.prevMaxCols.push(this.maxCols);\r\n\r\n                this.cellSize -= this.cellSizeChange;\r\n\r\n            }\r\n        \r\n        }else{\r\n\r\n            if(rows < this.prevMaxRows[this.prevMaxRows.length - 1] || cols < this.prevMaxCols[this.prevMaxCols.length - 1]){\r\n\r\n                if(rows > this.prevMaxRows[this.prevMaxRows.length - 1]){\r\n                    rows = this.prevMaxRows[this.prevMaxRows.length - 1];\r\n                }\r\n\r\n                if(cols > this.prevMaxCols[this.prevMaxCols.length - 1]){\r\n                    cols = this.prevMaxCols[this.prevMaxCols.length - 1];\r\n                }\r\n\r\n                this.prevMaxRows.pop();\r\n                this.prevMaxCols.pop();\r\n\r\n                this.cellSize += this.cellSizeChange;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        let maxDim = this.calculateRowsCols();\r\n\r\n        this.maxRows = maxDim.rows;\r\n        this.maxCols = maxDim.cols;\r\n\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n\r\n        this.cells = make2DArray(this.rows, this.cols);\r\n\r\n        for(let i = 0; i < this.rows; i++){\r\n            this.neighbors[i] = {};\r\n            for(let j = 0; j < this.cols; j++){\r\n                this.neighbors[i][j] = [];\r\n                for (let k = -1; k < 2; k++) {\r\n                    for (let l = -1; l < 2; l++) {\r\n                        let row = (k + i + this.rows) % this.rows;\r\n                        let col = (l + j + this.cols) % this.cols;\r\n                        this.neighbors[i][j].push({x : row, y : col});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        StateDict[StateNames[this.currentState]](this);\r\n\r\n    }\r\n\r\n    check(i, j){\r\n        return i >= 0 && i < this.rows && j >= 0 && j < this.cols;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const BoxBorder = (state) => {\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            state.cells[i][j] = 0;\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < state.cols; i++){\r\n        state.cells[0][i] = 1;\r\n        state.cells[state.rows-1][i] = 1;\r\n    }\r\n\r\n    for(let j = 1; j < state.rows-1; j++){\r\n        state.cells[j][0] = 1;\r\n        state.cells[j][state.cols-1] = 1;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const Random = (state) => {\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            state.cells[i][j] = 0;\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            if(Math.random() > 0.9){\r\n                state.cells[i][j] = 1;\r\n            }else{\r\n                state.cells[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const WhiteSpace = (state) => {\r\n\r\n    for(let i = 0; i < state.rows; i++){\r\n        for(let j = 0; j < state.cols; j++){\r\n            state.cells[i][j] = 0;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const InitialState = () => {\r\n    return new State(null);\r\n}\r\n\r\nconst StateDict = {WhiteSpace, BoxBorder, Random};\r\nexport let StateNames = [];\r\nfor(let k in StateDict) StateNames.push(k);\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n\r\n    if(action.type === \"CHANGE_DIM\"){\r\n\r\n        state.recalculate(action.data);\r\n\r\n    }else if(action.type === \"TOGGLE_ON\"){\r\n\r\n        state.cells[action.data.i][action.data.j] = 1;\r\n\r\n    }else if(action.type === \"TOGGLE_OFF\"){\r\n\r\n        state.cells[action.data.i][action.data.j] = 0;\r\n        \r\n    }else if(action.type === \"CHANGE_STATE\"){\r\n\r\n        let newIndex = 0;\r\n\r\n        if(action.data){\r\n\r\n            newIndex = state.currentState - 1;\r\n\r\n            if(newIndex < 0){\r\n                newIndex = StateNames.length - 1;\r\n            }\r\n\r\n        }else{\r\n\r\n            newIndex = state.currentState + 1;\r\n\r\n            if(newIndex >= StateNames.length){\r\n                newIndex = 0;\r\n            }\r\n\r\n        }\r\n\r\n        state.currentState = newIndex;\r\n        StateDict[StateNames[state.currentState]](state);\r\n\r\n    }else if(action.type === \"CLEAR\"){\r\n        \r\n        for(let i = 0; i < state.rows; i++){\r\n            for(let j = 0; j < state.cols; j++){\r\n                state.cells[i][j] = false;\r\n            }\r\n        }\r\n    \r\n    }else if(action.type === \"SIMULATING\"){\r\n\r\n        state.cells = Cellular(state, action.data.ruleList);\r\n\r\n    }\r\n\r\n    return new State(state, 0, 0);\r\n}\r\n\r\nconst make2DArray = (rows, cols)=> {\r\n    let arr = new Array(rows);\r\n    for (let i = 0; i < rows; i++) {\r\n        arr[i] = new Array(cols);\r\n    }\r\n    return arr;\r\n}\r\n","import React, {useContext, useState} from 'react';\r\nimport CellRow from './CellRow';\r\nimport Flipper from './Flipper';\r\nimport { worldContext, ruleListContext } from '../pages/Home';\r\n\r\nimport { StateNames } from './Reducers/WorldReducer';\r\n\r\nimport '../styles/World.css';\r\n\r\n\r\nexport const World = () => {\r\n\r\n    const [world, dispatch] = useContext(worldContext);\r\n    const [ruleList, ] = useContext(ruleListContext);\r\n\r\n    const [simulation, setSimulation] = useState(null);\r\n\r\n    const clear = () => {\r\n        dispatch({type : 'CLEAR', value: null});\r\n    }\r\n\r\n    const simulate = () => {\r\n        dispatch({type : 'SIMULATING', data : {ruleList}});\r\n    }\r\n\r\n    const toggleSimulation = () => {\r\n        if(simulation){\r\n            clearInterval(simulation);\r\n            setSimulation(null);\r\n        }else{\r\n            setSimulation(setInterval(simulate, 100));\r\n        }\r\n    }\r\n\r\n    const stateChange = (left) => {\r\n        dispatch({type : \"CHANGE_STATE\", data : left});\r\n    }\r\n\r\n    const changeDim = (rows) => {\r\n        if(rows){\r\n            return (left) => {\r\n                if(left){\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: false, rows : world.rows - 1, cols : world.cols}})\r\n                }else{\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: true, rows : world.rows + 1, cols : world.cols}})\r\n                }\r\n            }\r\n        }else{\r\n            return (left) => {\r\n                console.log(\"Changing....C\");\r\n                if(left){\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: false, rows : world.rows, cols : world.cols - 1}})\r\n                }else{\r\n                    dispatch({type : \"CHANGE_DIM\", data : {increase: true, rows : world.rows, cols : world.cols + 1}})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"world-container\">\r\n\r\n            <div className=\"world-wrapper\">\r\n                <div className=\"world-grid\">\r\n                {\r\n                    world.cells.map((row, i) => <CellRow i={i} key={i} row={row}></CellRow>)\r\n                }\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"world-controls\">\r\n                <div className=\"world-simlation-buttons\">\r\n                    {!simulation && <div className=\"world-btn world-play-pause\" onClick={(e) => toggleSimulation()}><i className=\"bi bi-play\"></i></div>}\r\n                    {simulation && <div className=\"world-btn world-play-pause\" onClick={(e) => toggleSimulation()}><i className=\"bi bi-pause\"></i></div>}\r\n                    <div className=\"world-btn world-step-it\" onClick={(e) => simulate()}><i className=\"bi bi-chevron-double-right\"></i></div>\r\n                </div>\r\n                <div className=\"world-state-buttons\">\r\n                    <Flipper state={StateNames[world.currentState]} callback={stateChange}></Flipper>\r\n                </div>\r\n                <div className=\"world-grid-controls\">\r\n                    <Flipper state={world.rows} callback={changeDim(true)}></Flipper>\r\n                    <Flipper state={world.cols} callback={changeDim(false)}></Flipper>\r\n                    <div className=\"world-btn world-clear\" onClick={(e) => clear()}><i className=\"bi bi-x-lg\"></i></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default World;","import { v4 } from 'uuid';\r\n\r\nclass Rule {\r\n\r\n    constructor(id){\r\n\r\n        this.id = id\r\n        this.grid = [0, 0, 0,\r\n                     0, 0, 0,\r\n                     0, 0, 0]\r\n        \r\n        this.onlyCount = false;\r\n        this.valid = true;\r\n        this.result = 0;\r\n        this.relations = [0, 0, 0];\r\n        this.relationOperations = ['>', '<', '='];\r\n\r\n    }\r\n\r\n}\r\n\r\nclass RuleList {\r\n\r\n    constructor(prevRuleList){\r\n\r\n        if(prevRuleList){\r\n            this.rules = prevRuleList.rules\r\n        }else{\r\n            this.rules = [this.newDefaultRule()];\r\n        }\r\n\r\n    }\r\n\r\n    newDefaultRule(){\r\n        return new Rule(this.generateId());\r\n    }\r\n\r\n    generateId(){\r\n        return v4();\r\n    }\r\n\r\n    getRuleById(id){\r\n        for(let i = 0; i < this.rules.length; i++){\r\n            if(this.rules[i].id === id){\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n}\r\n\r\nexport const InitialState = () => {\r\n    return new RuleList(null);\r\n}\r\n\r\nexport const reducer = (state, action) => {\r\n\r\n    if(action.type === \"TOGGLE_GRID\"){\r\n\r\n        let rule = state.rules[state.getRuleById(action.data.id)];\r\n        if(rule.grid[action.data.index]){\r\n            rule.grid[action.data.index] = 0;\r\n        }else{\r\n            rule.grid[action.data.index] = 1;\r\n        }\r\n\r\n    }else if(action.type === \"TOGGLE_RESULT\"){\r\n\r\n        let rule = state.rules[state.getRuleById(action.data.id)];\r\n        if(rule.result){\r\n            rule.result = 0;\r\n        }else{\r\n            rule.result = 1;\r\n        }\r\n\r\n    }else if(action.type === \"TOGGLE_VALID\"){\r\n\r\n        state.rules[state.getRuleById(action.data.id)].valid = !state.rules[state.getRuleById(action.data.id)].valid;\r\n\r\n    }else if(action.type === \"TOGGLE_ONLY_COUNT\"){\r\n        \r\n        state.rules[state.getRuleById(action.data.id)].onlyCount = !state.rules[state.getRuleById(action.data.id)].onlyCount;\r\n\r\n    }else if(action.type === \"TOGGLE_RELATION\"){\r\n\r\n        let rule = state.rules[state.getRuleById(action.data.id)];\r\n        if(rule.relations[action.data.index]){\r\n            rule.relations[action.data.index] = 0;\r\n        }else{\r\n            rule.relations[action.data.index] = 1;\r\n        }\r\n\r\n\r\n        if(action.data.index === 0){\r\n            rule.relations[1] = 0;\r\n        }else if(action.data.index === 1){\r\n            rule.relations[0] = 0;\r\n        }\r\n\r\n    }else if (action.type === \"REMOVE\"){\r\n\r\n        state.rules.splice(state.getRuleById(action.data.id), 1);\r\n\r\n    }else if(action.type === \"NEW\"){\r\n\r\n        state.rules.push(state.newDefaultRule());\r\n\r\n    }\r\n\r\n    return new RuleList(state);\r\n}","import React, {useContext, useState, useEffect} from 'react';\r\n\r\nimport { ruleContext } from './RuleList';\r\nimport { ruleListContext } from '../pages/Home';\r\n\r\nimport '../styles/RuleGrid.css';\r\n\r\nconst GridCell = ({index}) => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n    const [isAlive, setIsAlive] = useState(rule.grid[index]);\r\n\r\n\r\n    const [styles, setStyles] = useState({\r\n        backgroundColor : 'white',\r\n    });\r\n\r\n    const toggleLife = (e) => {\r\n        dispatch({type : \"TOGGLE_GRID\", data : {id : rule.id, index : index}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(isAlive){\r\n            setStyles({\r\n                backgroundColor : 'black',\r\n            })\r\n        }else{\r\n            setStyles({\r\n                backgroundColor : 'white',\r\n            })\r\n        }\r\n\r\n    }, [isAlive]);\r\n\r\n    useEffect(() => {\r\n        setIsAlive(rule.grid[index]);\r\n    }, [ruleList, rule, index]);\r\n\r\n    return (\r\n        <div onClick={toggleLife} style={styles} className=\"grid-cell-container\"></div>\r\n    );\r\n}\r\n\r\n\r\nconst RuleGrid = () => {\r\n\r\n    const rule = useContext(ruleContext);\r\n\r\n    return (\r\n        <div className=\"rule-grid-container\">\r\n            <div className=\"rule-grid-row\">\r\n                {rule.grid.slice(0, 3).map((state, index) => <GridCell key={0 + index} index={0 + index}></GridCell>)}\r\n            </div>\r\n            <div className=\"rule-grid-row\">\r\n                {rule.grid.slice(3, 6).map((state, index) => <GridCell key={3 + index} index={3 + index}></GridCell>)}\r\n            </div>\r\n            <div className=\"rule-grid-row\">\r\n                {rule.grid.slice(6, 9).map((state, index) => <GridCell key={6 + index} index={6 + index}></GridCell>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default RuleGrid;","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport RuleGrid from './RuleGrid';\r\nimport { ruleContext } from './RuleList';\r\n\r\nimport '../styles/Rule.css';\r\nimport { ruleListContext } from '../pages/Home';\r\n\r\nconst OutputCell = () => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const [isAlive, setIsAlive] = useState(rule.result);\r\n\r\n    const [styles, setStyles] = useState({\r\n        backgroundColor : 'white',\r\n    });\r\n\r\n    const toggleLife = (e) => {\r\n        dispatch({type : \"TOGGLE_RESULT\", data : {id : rule.id}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(isAlive){\r\n            setStyles({\r\n                backgroundColor : 'black',\r\n            })\r\n        }else{\r\n            setStyles({\r\n                backgroundColor : 'white',\r\n            })\r\n        }\r\n\r\n    }, [isAlive]);\r\n\r\n    useEffect(() => {\r\n        setIsAlive(rule.result);\r\n    }, [ruleList, rule]);\r\n\r\n    return (\r\n        <div onClick={toggleLife} style={styles} className=\"output-cell-container\"></div>\r\n    );\r\n\r\n}\r\n\r\nconst RelationCell = ({index, operation}) => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const [isOn, setIsOn] = useState(rule.relations[index]);\r\n\r\n    const [styles, setStyles] = useState({\r\n        color : 'black'\r\n    });\r\n\r\n    const toggleRelation = (e) => {\r\n        dispatch({type : \"TOGGLE_RELATION\", data : {id : rule.id, index : index}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(isOn){\r\n            setStyles({\r\n                color : 'blue'\r\n            });\r\n        }else{\r\n            setStyles({\r\n                color : 'black'\r\n            });\r\n        }\r\n\r\n    }, [isOn]);\r\n\r\n    useEffect(() => {\r\n        setIsOn(rule.relations[index]);\r\n    }, [ruleList, rule, index]);\r\n\r\n    return (\r\n        <div style={styles} onClick={toggleRelation} className=\"rule-input\">{operation}</div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst Rule = () => {\r\n\r\n    const rule = useContext(ruleContext);\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const [outerOverlayStyles, setOuterOverlayStyles] = useState({\r\n        display : 'none',\r\n    });\r\n\r\n    const [innerOverlayStyles, setInnerOverlayStyles] = useState({\r\n        display : 'none',\r\n    });\r\n\r\n    const toggleValid = () => {\r\n        dispatch({type : \"TOGGLE_VALID\", data : {id : rule.id}});\r\n    }\r\n\r\n    const toggleOnlyCount = () => {\r\n        dispatch({type : \"TOGGLE_ONLY_COUNT\", data : {id : rule.id}});\r\n    }\r\n\r\n    const removeRule = () => {\r\n        dispatch({type : \"REMOVE\", data : {id : rule.id}});\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(!rule.valid){\r\n            setOuterOverlayStyles({\r\n                display : 'block',\r\n            })\r\n        }else{\r\n            setOuterOverlayStyles({\r\n                display : 'none',\r\n            })\r\n        }\r\n\r\n        if(!rule.onlyCount){\r\n            setInnerOverlayStyles({\r\n                display : 'block',\r\n            })\r\n        }else{\r\n            setInnerOverlayStyles({\r\n                display : 'none',\r\n            })\r\n        }\r\n\r\n    }, [ruleList, rule]);\r\n\r\n    return (\r\n        <div className=\"rule-container\">\r\n            <div className=\"rule-title\">\r\n                <div className=\"rule-id\">\r\n                    #{rule.id.substring(1, 5)}\r\n                </div>\r\n                <div className=\"rule-visibility\">\r\n                    <input onClick={toggleValid} type=\"checkbox\" defaultChecked={rule.valid}/>\r\n                </div>\r\n                <div onClick={removeRule} className=\"rule-delete\">\r\n                    <i className=\"bi bi-x\"></i>\r\n                </div>\r\n            </div>\r\n            <div className=\"rule-body\">\r\n                <div style={outerOverlayStyles} className=\"rule-overlay\"></div>\r\n                <div className=\"rule-body-wrapper\">\r\n                    <div className=\"rule-rule\">\r\n                        <div className=\"rule-grid\">\r\n                            <RuleGrid></RuleGrid>\r\n                        </div>\r\n                        <div className=\"rule-spacer\">\r\n                            <i className=\"bi bi-arrow-right\"></i>\r\n                        </div>\r\n                        <div className=\"rule-output\">\r\n                            <OutputCell></OutputCell>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"rule-controls\">\r\n                        <div className=\"rule-only-count\">\r\n                            <input onClick={toggleOnlyCount} type=\"checkbox\" defaultChecked={rule.onlyCount}/>\r\n                        </div>\r\n                        <div className=\"rule-relations\">\r\n                            <div style={innerOverlayStyles} className=\"rule-relations-overlay\"></div>\r\n                            <div className=\"rule-relations-wrapper\">\r\n                                {rule.relationOperations.map((operation, index) => <RelationCell key={index} index={index} operation={operation}></RelationCell>)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Rule;","import React, { createContext, useContext } from 'react';\r\nimport { ruleListContext } from '../pages/Home';\r\n\r\nimport Rule from './Rule';\r\n\r\nimport '../styles/RuleList.css';\r\n\r\nexport const ruleContext = createContext();\r\n\r\nexport const RuleList = () => {\r\n\r\n    const [ruleList, dispatch] = useContext(ruleListContext);\r\n\r\n    const addNewRule = () => {\r\n        dispatch({type : \"NEW\"});\r\n    }\r\n\r\n    return (\r\n        <div className=\"rule-list-container\">\r\n            <div className=\"rule-list-body\">\r\n                {ruleList.rules.map((RuleItem, index) => (\r\n                    <ruleContext.Provider key={index} value={RuleItem}>\r\n                        <Rule></Rule>\r\n                    </ruleContext.Provider>\r\n                )\r\n                )}\r\n            </div>\r\n            <div className=\"rule-list-controls\">\r\n                <div onClick={addNewRule} className=\"rule-list-add\"><i className=\"bi bi-plus-square\"></i></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {createContext, useReducer} from 'react';\r\nimport World from '../components/World'; \r\nimport { reducer as worldReducer, InitialState as InitialWorldState } from '../components/Reducers/WorldReducer';\r\nimport { reducer as ruleListReducer, InitialState as InitialRuleListState } from '../components/Reducers/RuleListReducer';\r\nimport { RuleList } from '../components/RuleList';\r\n\r\n\r\nimport '../styles/Home.css';\r\n\r\nexport const worldContext = createContext();\r\nexport const ruleListContext = createContext();\r\n\r\nexport const convertVwToPx = (vw=80) => {\r\n    const oneVhInPx = window.innerWidth / 100;\r\n    return oneVhInPx * vw;\r\n};\r\n\r\nexport const convertVhToPx = (vh=80) => {\r\n    const oneVhInPx = window.innerHeight / 100;\r\n    return oneVhInPx * vh;\r\n};\r\n\r\n\r\nexport const Home = () => {\r\n\r\n    // const initialRows = 10;\r\n    // const initialCols = 10;\r\n\r\n    return (\r\n        <worldContext.Provider value={useReducer(worldReducer, null, InitialWorldState)}>\r\n            <ruleListContext.Provider value={useReducer(ruleListReducer, null, InitialRuleListState)}>\r\n                <div className=\"home-container\">\r\n                    <div className=\"home-wrapper\">\r\n                        <World/>\r\n                        <RuleList/>\r\n                    </div>\r\n                </div>\r\n            </ruleListContext.Provider>\r\n        </worldContext.Provider>\r\n    )\r\n}\r\n\r\n// export default Home\r\n","import '../styles/App.css';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport { Home } from './Home';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Switch>\r\n        <Route exact path='/'>\r\n            <Home/>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\nimport App from './pages/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}